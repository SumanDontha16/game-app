{"ast":null,"code":"var _jsxFileName = \"/Users/sumandontha/Downloads/fe-coding-challenge-master/src/components/board/index.js\";\nimport React, { useState } from 'react';\nimport './index.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Square from '../square';\nimport { selectCell } from '../../store/actions/moves';\n\nconst selectBoard = state => state.board;\n\nconst selectGame = state => state.game;\n\nconst getRandomCell = i => Math.floor(Math.random() * i);\n\nconst calculateWinner = squares => {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i += 1) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {\n        winner: squares[a],\n        winnerRow: lines[i]\n      };\n    }\n  }\n\n  return {\n    winner: null,\n    winnerRow: null\n  };\n};\n\nexport const Board = () => {\n  const {\n    winner,\n    winnerRow\n  } = calculateWinner(squares);\n  const board = useSelector(selectBoard);\n  const game = useSelector(selectGame);\n  const dispatch = useDispatch();\n  let status;\n\n  if (winner) {\n    status = `Winner ${winner}`;\n  } else if (history.length === i) {\n    status = 'Draw. No one won.';\n  } else {\n    status = `Next player: ${this.state.xIsNext ? 'X' : 'O'}`;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"BoardContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, board.map(b => {\n    {\n      b.map(item => console.log(item));\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => dispatch(selectCell(game.currentPlayer, getRandomCell(board.length), getRandomCell(board.length))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, game.currentPlayer)), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, status));\n};","map":{"version":3,"sources":["/Users/sumandontha/Downloads/fe-coding-challenge-master/src/components/board/index.js"],"names":["React","useState","useSelector","useDispatch","Square","selectCell","selectBoard","state","board","selectGame","game","getRandomCell","i","Math","floor","random","calculateWinner","squares","lines","length","a","b","c","winner","winnerRow","Board","dispatch","status","history","xIsNext","map","item","console","log","currentPlayer"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './index.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Square from '../square'\nimport { selectCell } from '../../store/actions/moves';\n\nconst selectBoard = (state) => state.board\nconst selectGame = (state) => state.game\n\nconst getRandomCell = (i) => Math.floor(Math.random() * i)\n\nconst calculateWinner = (squares) => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let i = 0; i < lines.length; i += 1) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return { winner: squares[a], winnerRow: lines[i] };\n    }\n  }\n\n  return { winner: null, winnerRow: null };\n};\n\n\nexport const Board = () => {\n  const { winner, winnerRow } = calculateWinner(squares);\n  const board = useSelector(selectBoard)\n  const game = useSelector(selectGame)\n  const dispatch = useDispatch()\n\n\n\n  let status;\n  if (winner) {\n    status = `Winner ${winner}`;\n  } else if (history.length === i) {\n    status = 'Draw. No one won.';\n  } else {\n    status = `Next player: ${this.state.xIsNext ? 'X' : 'O'}`;\n  }\n\n  return (\n    <div className=\"BoardContainer\">\n      <div className=\"Board\">\n        {board.map((b) => {\n          { b.map((item) => console.log(item)) }\n        })}\n        {/* Board: {JSON.stringify(board)} */}\n        <button onClick={() => dispatch(\n          selectCell(\n            game.currentPlayer,\n            getRandomCell(board.length),\n            getRandomCell(board.length)\n          )\n        )}>\n          {game.currentPlayer}\n        </button>\n      </div>\n      <div>{status}</div>\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}