{"ast":null,"code":"var _jsxFileName = \"/Users/sumandontha/Documents/GitHub/game-app/src/components/board/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport './index.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Square from '../square';\nimport { Patterns } from '../patterns';\nimport { selectCell } from '../../store/actions/moves';\n\nconst selectBoard = state => state.board;\n\nconst selectGame = state => state.game;\n\nconst getRandomCell = i => Math.floor(Math.random() * i);\n\nexport const Board = () => {\n  const board = useSelector(selectBoard);\n  const game = useSelector(selectGame);\n  const dispatch = useDispatch(); // console.log('..........',JSON.stringify(board));\n\n  const [player, setPlayer] = useState(game.currentPlayer);\n  const [result, setResult] = useState({\n    winner: \"none\",\n    state: \"none\"\n  });\n  useEffect(() => {\n    checkWin();\n\n    if (player === \"X\") {\n      setPlayer(\"0\");\n    } else {\n      setPlayer(\"X\");\n    }\n  }, [board[0]]);\n  useEffect(() => {\n    if (result.state !== \"none\") {// alert(`Game Finished! Winning Player: ${result.winner}`)\n    }\n  }, [result]);\n\n  const chooseSquare = (row, cell, position) => {\n    dispatch(selectCell(game.currentPlayer, row, cell, position)); //checkWin();\n  };\n\n  const checkWin = () => {\n    Patterns.forEach(currPattern => {\n      const firstPlayer = board[currPattern[0]];\n      if (firstPlayer == \"\") return;\n      let foundWinningPattern = true;\n      currPattern.forEach(idx => {\n        if (board[idx] != firstPlayer) {\n          foundWinningPattern = false;\n        }\n      });\n\n      if (foundWinningPattern) {\n        setResult({\n          winner: player,\n          state: \"Won\"\n        });\n      }\n    });\n  };\n\n  const allEqual = currentPattern => currentPattern.every(v => v === currentPattern[0]);\n\n  const checkWin1 = () => {\n    Patterns.forEach(currentPattern => {\n      currentPattern.forEach(patternCell => {\n        board.forEach(boardCell => {});\n      });\n      const status = allEqual(currentPattern);\n      console.log('Status:', status);\n\n      if (status) {\n        setResult({\n          winner: currentPattern[0],\n          state: \"won\"\n        });\n        return;\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"BoardContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Board\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Square, {\n    val: board[0][0],\n    chooseSquare: () => chooseSquare(0, 0, 0),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Square, {\n    val: board[0][1],\n    chooseSquare: () => chooseSquare(0, 1, 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Square, {\n    val: board[0][2],\n    chooseSquare: () => chooseSquare(0, 2, 2),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Square, {\n    val: board[1][0],\n    chooseSquare: () => chooseSquare(1, 0, 3),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Square, {\n    val: board[1][1],\n    chooseSquare: () => chooseSquare(1, 1, 4),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Square, {\n    val: board[1][2],\n    chooseSquare: () => chooseSquare(1, 2, 5),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Square, {\n    val: board[2][0],\n    chooseSquare: () => chooseSquare(2, 0, 6),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Square, {\n    val: board[2][1],\n    chooseSquare: () => chooseSquare(2, 1, 7),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Square, {\n    val: board[2][2],\n    chooseSquare: () => chooseSquare(2, 2, 8),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => dispatch(selectCell(game.currentPlayer, getRandomCell(board.length), getRandomCell(board.length))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, game.currentPlayer)));\n};","map":{"version":3,"sources":["/Users/sumandontha/Documents/GitHub/game-app/src/components/board/index.js"],"names":["React","useState","useEffect","useSelector","useDispatch","Square","Patterns","selectCell","selectBoard","state","board","selectGame","game","getRandomCell","i","Math","floor","random","Board","dispatch","player","setPlayer","currentPlayer","result","setResult","winner","checkWin","chooseSquare","row","cell","position","forEach","currPattern","firstPlayer","foundWinningPattern","idx","allEqual","currentPattern","every","v","checkWin1","patternCell","boardCell","status","console","log","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './index.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Square from '../square'\nimport { Patterns } from '../patterns'\nimport { selectCell } from '../../store/actions/moves';\n\nconst selectBoard = (state) => state.board\nconst selectGame = (state) => state.game\n\nconst getRandomCell = (i) => Math.floor(Math.random() * i)\n\nexport const Board = () => {\n  const board = useSelector(selectBoard)\n  const game = useSelector(selectGame)\n  const dispatch = useDispatch();\n\n  // console.log('..........',JSON.stringify(board));\n\n  const [player, setPlayer] = useState(game.currentPlayer)\n  const [result, setResult] = useState({ winner: \"none\", state: \"none\" })\n\n  useEffect(() => {\n    checkWin()\n    if (player === \"X\") {\n      setPlayer(\"0\")\n    } else {\n      setPlayer(\"X\")\n    }\n  }, [board[0]])\n\n  useEffect(() => {\n    if (result.state !== \"none\") {\n      // alert(`Game Finished! Winning Player: ${result.winner}`)\n    }\n  }, [result])\n\n  const chooseSquare = (row, cell, position) => {\n    dispatch(selectCell(game.currentPlayer, row, cell, position));\n    //checkWin();\n  }\n\n  const checkWin = () => {\n    Patterns.forEach((currPattern) => {\n      const firstPlayer = board[currPattern[0]];\n      if (firstPlayer == \"\") return;\n      let foundWinningPattern = true;\n      currPattern.forEach((idx) => {\n        if (board[idx] != firstPlayer) {\n          foundWinningPattern = false;\n        }\n      });\n\n      if (foundWinningPattern) {\n        setResult({ winner: player, state: \"Won\" });\n      }\n    });\n  };\n\n  const allEqual = currentPattern => currentPattern.every(v => v === currentPattern[0])\n\n\n  const checkWin1 = () => {\n    Patterns.forEach((currentPattern) => {\n      currentPattern.forEach((patternCell) => {\n        board.forEach((boardCell) => {\n\n        })\n      });\n\n      const status = allEqual(currentPattern);\n      console.log('Status:', status);\n      if (status) {\n        setResult({ winner: currentPattern[0], state: \"won\" });\n        return;\n      }\n\n    });\n  }\n\n  return (\n    <div className=\"BoardContainer\">\n      <div className=\"Board\">\n        <div className=\"row\">\n          <Square val={board[0][0]} chooseSquare={() => chooseSquare(0, 0, 0)} />\n          <Square val={board[0][1]} chooseSquare={() => chooseSquare(0, 1, 1)} />\n          <Square val={board[0][2]} chooseSquare={() => chooseSquare(0, 2, 2)} />\n        </div>\n        <div className=\"row\">\n          <Square val={board[1][0]} chooseSquare={() => chooseSquare(1, 0, 3)} />\n          <Square val={board[1][1]} chooseSquare={() => chooseSquare(1, 1, 4)} />\n          <Square val={board[1][2]} chooseSquare={() => chooseSquare(1, 2, 5)} />\n        </div>\n        <div className=\"row\">\n          <Square val={board[2][0]} chooseSquare={() => chooseSquare(2, 0, 6)} />\n          <Square val={board[2][1]} chooseSquare={() => chooseSquare(2, 1, 7)} />\n          <Square val={board[2][2]} chooseSquare={() => chooseSquare(2, 2, 8)} />\n        </div>\n        <button onClick={() => dispatch(\n          selectCell(\n            game.currentPlayer,\n            getRandomCell(board.length),\n            getRandomCell(board.length)\n          )\n        )}>\n          {game.currentPlayer}\n        </button>\n      </div>\n\n    </div>\n  )\n}"]},"metadata":{},"sourceType":"module"}